// Code generated by mockery v2.46.3. DO NOT EDIT.

package config_source

import (
	config_source "github.com/leemiyinghao/go-av1/internal/config_source"
	mock "github.com/stretchr/testify/mock"
)

// MockConfigSource is an autogenerated mock type for the ConfigSource type
type MockConfigSource struct {
	mock.Mock
}

type MockConfigSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigSource) EXPECT() *MockConfigSource_Expecter {
	return &MockConfigSource_Expecter{mock: &_m.Mock}
}

// GetTaskTemplates provides a mock function with given fields:
func (_m *MockConfigSource) GetTaskTemplates() []config_source.ConfigTaskTemplate {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTaskTemplates")
	}

	var r0 []config_source.ConfigTaskTemplate
	if rf, ok := ret.Get(0).(func() []config_source.ConfigTaskTemplate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]config_source.ConfigTaskTemplate)
		}
	}

	return r0
}

// MockConfigSource_GetTaskTemplates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskTemplates'
type MockConfigSource_GetTaskTemplates_Call struct {
	*mock.Call
}

// GetTaskTemplates is a helper method to define mock.On call
func (_e *MockConfigSource_Expecter) GetTaskTemplates() *MockConfigSource_GetTaskTemplates_Call {
	return &MockConfigSource_GetTaskTemplates_Call{Call: _e.mock.On("GetTaskTemplates")}
}

func (_c *MockConfigSource_GetTaskTemplates_Call) Run(run func()) *MockConfigSource_GetTaskTemplates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigSource_GetTaskTemplates_Call) Return(_a0 []config_source.ConfigTaskTemplate) *MockConfigSource_GetTaskTemplates_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigSource_GetTaskTemplates_Call) RunAndReturn(run func() []config_source.ConfigTaskTemplate) *MockConfigSource_GetTaskTemplates_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfigSource creates a new instance of MockConfigSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigSource {
	mock := &MockConfigSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
