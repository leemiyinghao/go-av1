// Code generated by mockery v2.46.3. DO NOT EDIT.

package runner

import (
	mock "github.com/stretchr/testify/mock"

	task_flow "github.com/leemiyinghao/go-av1/internal/entity/task_flow"
)

// MockRunner is an autogenerated mock type for the Runner type
type MockRunner struct {
	mock.Mock
}

type MockRunner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRunner) EXPECT() *MockRunner_Expecter {
	return &MockRunner_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields: _a0, _a1
func (_m *MockRunner) Run(_a0 task_flow.Task, _a1 string) (*string, *string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 *string
	var r1 *string
	var r2 error
	if rf, ok := ret.Get(0).(func(task_flow.Task, string) (*string, *string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(task_flow.Task, string) *string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(task_flow.Task, string) *string); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	if rf, ok := ret.Get(2).(func(task_flow.Task, string) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockRunner_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockRunner_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - _a0 task_flow.Task
//   - _a1 string
func (_e *MockRunner_Expecter) Run(_a0 interface{}, _a1 interface{}) *MockRunner_Run_Call {
	return &MockRunner_Run_Call{Call: _e.mock.On("Run", _a0, _a1)}
}

func (_c *MockRunner_Run_Call) Run(run func(_a0 task_flow.Task, _a1 string)) *MockRunner_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(task_flow.Task), args[1].(string))
	})
	return _c
}

func (_c *MockRunner_Run_Call) Return(_a0 *string, _a1 *string, _a2 error) *MockRunner_Run_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockRunner_Run_Call) RunAndReturn(run func(task_flow.Task, string) (*string, *string, error)) *MockRunner_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRunner creates a new instance of MockRunner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRunner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRunner {
	mock := &MockRunner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
