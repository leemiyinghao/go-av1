// Code generated by mockery v2.46.3. DO NOT EDIT.

package task

import (
	task "github.com/leemiyinghao/go-av1/internal/models/task"
	task_type "github.com/leemiyinghao/go-av1/internal/models/task_type"
	mock "github.com/stretchr/testify/mock"
)

// MockTask is an autogenerated mock type for the Task type
type MockTask struct {
	mock.Mock
}

type MockTask_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTask) EXPECT() *MockTask_Expecter {
	return &MockTask_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields:
func (_m *MockTask) Execute() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTask_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockTask_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *MockTask_Expecter) Execute() *MockTask_Execute_Call {
	return &MockTask_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *MockTask_Execute_Call) Run(run func()) *MockTask_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTask_Execute_Call) Return(_a0 string, _a1 error) *MockTask_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTask_Execute_Call) RunAndReturn(run func() (string, error)) *MockTask_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GetOriginalFilePath provides a mock function with given fields:
func (_m *MockTask) GetOriginalFilePath() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOriginalFilePath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockTask_GetOriginalFilePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOriginalFilePath'
type MockTask_GetOriginalFilePath_Call struct {
	*mock.Call
}

// GetOriginalFilePath is a helper method to define mock.On call
func (_e *MockTask_Expecter) GetOriginalFilePath() *MockTask_GetOriginalFilePath_Call {
	return &MockTask_GetOriginalFilePath_Call{Call: _e.mock.On("GetOriginalFilePath")}
}

func (_c *MockTask_GetOriginalFilePath_Call) Run(run func()) *MockTask_GetOriginalFilePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTask_GetOriginalFilePath_Call) Return(_a0 string) *MockTask_GetOriginalFilePath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTask_GetOriginalFilePath_Call) RunAndReturn(run func() string) *MockTask_GetOriginalFilePath_Call {
	_c.Call.Return(run)
	return _c
}

// GetOutputFilePath provides a mock function with given fields:
func (_m *MockTask) GetOutputFilePath() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOutputFilePath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockTask_GetOutputFilePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOutputFilePath'
type MockTask_GetOutputFilePath_Call struct {
	*mock.Call
}

// GetOutputFilePath is a helper method to define mock.On call
func (_e *MockTask_Expecter) GetOutputFilePath() *MockTask_GetOutputFilePath_Call {
	return &MockTask_GetOutputFilePath_Call{Call: _e.mock.On("GetOutputFilePath")}
}

func (_c *MockTask_GetOutputFilePath_Call) Run(run func()) *MockTask_GetOutputFilePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTask_GetOutputFilePath_Call) Return(_a0 string) *MockTask_GetOutputFilePath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTask_GetOutputFilePath_Call) RunAndReturn(run func() string) *MockTask_GetOutputFilePath_Call {
	_c.Call.Return(run)
	return _c
}

// GetTemplate provides a mock function with given fields:
func (_m *MockTask) GetTemplate() task.TaskTemplate {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTemplate")
	}

	var r0 task.TaskTemplate
	if rf, ok := ret.Get(0).(func() task.TaskTemplate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(task.TaskTemplate)
		}
	}

	return r0
}

// MockTask_GetTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplate'
type MockTask_GetTemplate_Call struct {
	*mock.Call
}

// GetTemplate is a helper method to define mock.On call
func (_e *MockTask_Expecter) GetTemplate() *MockTask_GetTemplate_Call {
	return &MockTask_GetTemplate_Call{Call: _e.mock.On("GetTemplate")}
}

func (_c *MockTask_GetTemplate_Call) Run(run func()) *MockTask_GetTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTask_GetTemplate_Call) Return(_a0 task.TaskTemplate) *MockTask_GetTemplate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTask_GetTemplate_Call) RunAndReturn(run func() task.TaskTemplate) *MockTask_GetTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// GetType provides a mock function with given fields:
func (_m *MockTask) GetType() task_type.TaskType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetType")
	}

	var r0 task_type.TaskType
	if rf, ok := ret.Get(0).(func() task_type.TaskType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(task_type.TaskType)
	}

	return r0
}

// MockTask_GetType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetType'
type MockTask_GetType_Call struct {
	*mock.Call
}

// GetType is a helper method to define mock.On call
func (_e *MockTask_Expecter) GetType() *MockTask_GetType_Call {
	return &MockTask_GetType_Call{Call: _e.mock.On("GetType")}
}

func (_c *MockTask_GetType_Call) Run(run func()) *MockTask_GetType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTask_GetType_Call) Return(_a0 task_type.TaskType) *MockTask_GetType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTask_GetType_Call) RunAndReturn(run func() task_type.TaskType) *MockTask_GetType_Call {
	_c.Call.Return(run)
	return _c
}

// SetOriginalFilePath provides a mock function with given fields: _a0
func (_m *MockTask) SetOriginalFilePath(_a0 string) {
	_m.Called(_a0)
}

// MockTask_SetOriginalFilePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOriginalFilePath'
type MockTask_SetOriginalFilePath_Call struct {
	*mock.Call
}

// SetOriginalFilePath is a helper method to define mock.On call
//   - _a0 string
func (_e *MockTask_Expecter) SetOriginalFilePath(_a0 interface{}) *MockTask_SetOriginalFilePath_Call {
	return &MockTask_SetOriginalFilePath_Call{Call: _e.mock.On("SetOriginalFilePath", _a0)}
}

func (_c *MockTask_SetOriginalFilePath_Call) Run(run func(_a0 string)) *MockTask_SetOriginalFilePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTask_SetOriginalFilePath_Call) Return() *MockTask_SetOriginalFilePath_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTask_SetOriginalFilePath_Call) RunAndReturn(run func(string)) *MockTask_SetOriginalFilePath_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTask creates a new instance of MockTask. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTask(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTask {
	mock := &MockTask{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
