// Code generated by mockery v2.46.3. DO NOT EDIT.

package task_template

import mock "github.com/stretchr/testify/mock"

// MockTaskTemplate is an autogenerated mock type for the TaskTemplate type
type MockTaskTemplate struct {
	mock.Mock
}

type MockTaskTemplate_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTaskTemplate) EXPECT() *MockTaskTemplate_Expecter {
	return &MockTaskTemplate_Expecter{mock: &_m.Mock}
}

// MatchFilter provides a mock function with given fields: context
func (_m *MockTaskTemplate) MatchFilter(context map[string]interface{}) bool {
	ret := _m.Called(context)

	if len(ret) == 0 {
		panic("no return value specified for MatchFilter")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(map[string]interface{}) bool); ok {
		r0 = rf(context)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockTaskTemplate_MatchFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MatchFilter'
type MockTaskTemplate_MatchFilter_Call struct {
	*mock.Call
}

// MatchFilter is a helper method to define mock.On call
//   - context map[string]interface{}
func (_e *MockTaskTemplate_Expecter) MatchFilter(context interface{}) *MockTaskTemplate_MatchFilter_Call {
	return &MockTaskTemplate_MatchFilter_Call{Call: _e.mock.On("MatchFilter", context)}
}

func (_c *MockTaskTemplate_MatchFilter_Call) Run(run func(context map[string]interface{})) *MockTaskTemplate_MatchFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}))
	})
	return _c
}

func (_c *MockTaskTemplate_MatchFilter_Call) Return(_a0 bool) *MockTaskTemplate_MatchFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTaskTemplate_MatchFilter_Call) RunAndReturn(run func(map[string]interface{}) bool) *MockTaskTemplate_MatchFilter_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTaskTemplate creates a new instance of MockTaskTemplate. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTaskTemplate(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTaskTemplate {
	mock := &MockTaskTemplate{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
