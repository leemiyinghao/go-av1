// Code generated by mockery v2.46.3. DO NOT EDIT.

package task_template

import (
	task "github.com/leemiyinghao/go-av1/internal/models/task"
	mock "github.com/stretchr/testify/mock"
)

// MockTaskTemplate is an autogenerated mock type for the TaskTemplate type
type MockTaskTemplate struct {
	mock.Mock
}

type MockTaskTemplate_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTaskTemplate) EXPECT() *MockTaskTemplate_Expecter {
	return &MockTaskTemplate_Expecter{mock: &_m.Mock}
}

// GenerateTask provides a mock function with given fields: source_path
func (_m *MockTaskTemplate) GenerateTask(source_path string) task.Task {
	ret := _m.Called(source_path)

	if len(ret) == 0 {
		panic("no return value specified for GenerateTask")
	}

	var r0 task.Task
	if rf, ok := ret.Get(0).(func(string) task.Task); ok {
		r0 = rf(source_path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(task.Task)
		}
	}

	return r0
}

// MockTaskTemplate_GenerateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateTask'
type MockTaskTemplate_GenerateTask_Call struct {
	*mock.Call
}

// GenerateTask is a helper method to define mock.On call
//   - source_path string
func (_e *MockTaskTemplate_Expecter) GenerateTask(source_path interface{}) *MockTaskTemplate_GenerateTask_Call {
	return &MockTaskTemplate_GenerateTask_Call{Call: _e.mock.On("GenerateTask", source_path)}
}

func (_c *MockTaskTemplate_GenerateTask_Call) Run(run func(source_path string)) *MockTaskTemplate_GenerateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTaskTemplate_GenerateTask_Call) Return(_a0 task.Task) *MockTaskTemplate_GenerateTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTaskTemplate_GenerateTask_Call) RunAndReturn(run func(string) task.Task) *MockTaskTemplate_GenerateTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with given fields:
func (_m *MockTaskTemplate) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockTaskTemplate_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type MockTaskTemplate_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *MockTaskTemplate_Expecter) GetName() *MockTaskTemplate_GetName_Call {
	return &MockTaskTemplate_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *MockTaskTemplate_GetName_Call) Run(run func()) *MockTaskTemplate_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTaskTemplate_GetName_Call) Return(_a0 string) *MockTaskTemplate_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTaskTemplate_GetName_Call) RunAndReturn(run func() string) *MockTaskTemplate_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GetStoreKey provides a mock function with given fields:
func (_m *MockTaskTemplate) GetStoreKey() *string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStoreKey")
	}

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// MockTaskTemplate_GetStoreKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStoreKey'
type MockTaskTemplate_GetStoreKey_Call struct {
	*mock.Call
}

// GetStoreKey is a helper method to define mock.On call
func (_e *MockTaskTemplate_Expecter) GetStoreKey() *MockTaskTemplate_GetStoreKey_Call {
	return &MockTaskTemplate_GetStoreKey_Call{Call: _e.mock.On("GetStoreKey")}
}

func (_c *MockTaskTemplate_GetStoreKey_Call) Run(run func()) *MockTaskTemplate_GetStoreKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTaskTemplate_GetStoreKey_Call) Return(_a0 *string) *MockTaskTemplate_GetStoreKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTaskTemplate_GetStoreKey_Call) RunAndReturn(run func() *string) *MockTaskTemplate_GetStoreKey_Call {
	_c.Call.Return(run)
	return _c
}

// MatchFilter provides a mock function with given fields: context
func (_m *MockTaskTemplate) MatchFilter(context map[string]interface{}) bool {
	ret := _m.Called(context)

	if len(ret) == 0 {
		panic("no return value specified for MatchFilter")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(map[string]interface{}) bool); ok {
		r0 = rf(context)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockTaskTemplate_MatchFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MatchFilter'
type MockTaskTemplate_MatchFilter_Call struct {
	*mock.Call
}

// MatchFilter is a helper method to define mock.On call
//   - context map[string]interface{}
func (_e *MockTaskTemplate_Expecter) MatchFilter(context interface{}) *MockTaskTemplate_MatchFilter_Call {
	return &MockTaskTemplate_MatchFilter_Call{Call: _e.mock.On("MatchFilter", context)}
}

func (_c *MockTaskTemplate_MatchFilter_Call) Run(run func(context map[string]interface{})) *MockTaskTemplate_MatchFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}))
	})
	return _c
}

func (_c *MockTaskTemplate_MatchFilter_Call) Return(_a0 bool) *MockTaskTemplate_MatchFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTaskTemplate_MatchFilter_Call) RunAndReturn(run func(map[string]interface{}) bool) *MockTaskTemplate_MatchFilter_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTaskTemplate creates a new instance of MockTaskTemplate. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTaskTemplate(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTaskTemplate {
	mock := &MockTaskTemplate{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
