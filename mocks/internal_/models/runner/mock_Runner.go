// Code generated by mockery v2.46.3. DO NOT EDIT.

package runner

import (
	mock "github.com/stretchr/testify/mock"

	task "github.com/leemiyinghao/go-av1/internal/models/task"
)

// MockRunner is an autogenerated mock type for the Runner type
type MockRunner struct {
	mock.Mock
}

type MockRunner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRunner) EXPECT() *MockRunner_Expecter {
	return &MockRunner_Expecter{mock: &_m.Mock}
}

// SetSource provides a mock function with given fields: source
func (_m *MockRunner) SetSource(source chan task.Task) {
	_m.Called(source)
}

// MockRunner_SetSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSource'
type MockRunner_SetSource_Call struct {
	*mock.Call
}

// SetSource is a helper method to define mock.On call
//   - source chan task.Task
func (_e *MockRunner_Expecter) SetSource(source interface{}) *MockRunner_SetSource_Call {
	return &MockRunner_SetSource_Call{Call: _e.mock.On("SetSource", source)}
}

func (_c *MockRunner_SetSource_Call) Run(run func(source chan task.Task)) *MockRunner_SetSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(chan task.Task))
	})
	return _c
}

func (_c *MockRunner_SetSource_Call) Return() *MockRunner_SetSource_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRunner_SetSource_Call) RunAndReturn(run func(chan task.Task)) *MockRunner_SetSource_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields:
func (_m *MockRunner) Start() {
	_m.Called()
}

// MockRunner_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockRunner_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockRunner_Expecter) Start() *MockRunner_Start_Call {
	return &MockRunner_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockRunner_Start_Call) Run(run func()) *MockRunner_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRunner_Start_Call) Return() *MockRunner_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRunner_Start_Call) RunAndReturn(run func()) *MockRunner_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Wait provides a mock function with given fields:
func (_m *MockRunner) Wait() {
	_m.Called()
}

// MockRunner_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type MockRunner_Wait_Call struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
func (_e *MockRunner_Expecter) Wait() *MockRunner_Wait_Call {
	return &MockRunner_Wait_Call{Call: _e.mock.On("Wait")}
}

func (_c *MockRunner_Wait_Call) Run(run func()) *MockRunner_Wait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRunner_Wait_Call) Return() *MockRunner_Wait_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRunner_Wait_Call) RunAndReturn(run func()) *MockRunner_Wait_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRunner creates a new instance of MockRunner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRunner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRunner {
	mock := &MockRunner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
