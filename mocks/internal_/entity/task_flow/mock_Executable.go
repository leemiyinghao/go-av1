// Code generated by mockery v2.46.3. DO NOT EDIT.

package task_flow

import (
	task_context "github.com/leemiyinghao/go-av1/internal/value_object/task_context"
	mock "github.com/stretchr/testify/mock"
)

// MockExecutable is an autogenerated mock type for the Executable type
type MockExecutable struct {
	mock.Mock
}

type MockExecutable_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutable) EXPECT() *MockExecutable_Expecter {
	return &MockExecutable_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *MockExecutable) Execute(_a0 task_context.TaskContext) (*string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(task_context.TaskContext) (*string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(task_context.TaskContext) *string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(task_context.TaskContext) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutable_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockExecutable_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 task_context.TaskContext
func (_e *MockExecutable_Expecter) Execute(_a0 interface{}) *MockExecutable_Execute_Call {
	return &MockExecutable_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *MockExecutable_Execute_Call) Run(run func(_a0 task_context.TaskContext)) *MockExecutable_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(task_context.TaskContext))
	})
	return _c
}

func (_c *MockExecutable_Execute_Call) Return(_a0 *string, _a1 error) *MockExecutable_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutable_Execute_Call) RunAndReturn(run func(task_context.TaskContext) (*string, error)) *MockExecutable_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExecutable creates a new instance of MockExecutable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutable {
	mock := &MockExecutable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
