// Code generated by mockery v2.46.3. DO NOT EDIT.

package task_flow

import (
	task_execution_type "github.com/leemiyinghao/go-av1/internal/value_object/task_execution_type"
	task_filter "github.com/leemiyinghao/go-av1/internal/value_object/task_filter"
	mock "github.com/stretchr/testify/mock"
)

// MockTask is an autogenerated mock type for the Task type
type MockTask struct {
	mock.Mock
}

type MockTask_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTask) EXPECT() *MockTask_Expecter {
	return &MockTask_Expecter{mock: &_m.Mock}
}

// GetExecutionType provides a mock function with given fields:
func (_m *MockTask) GetExecutionType() task_execution_type.TaskExecutionType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionType")
	}

	var r0 task_execution_type.TaskExecutionType
	if rf, ok := ret.Get(0).(func() task_execution_type.TaskExecutionType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(task_execution_type.TaskExecutionType)
	}

	return r0
}

// MockTask_GetExecutionType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionType'
type MockTask_GetExecutionType_Call struct {
	*mock.Call
}

// GetExecutionType is a helper method to define mock.On call
func (_e *MockTask_Expecter) GetExecutionType() *MockTask_GetExecutionType_Call {
	return &MockTask_GetExecutionType_Call{Call: _e.mock.On("GetExecutionType")}
}

func (_c *MockTask_GetExecutionType_Call) Run(run func()) *MockTask_GetExecutionType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTask_GetExecutionType_Call) Return(_a0 task_execution_type.TaskExecutionType) *MockTask_GetExecutionType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTask_GetExecutionType_Call) RunAndReturn(run func() task_execution_type.TaskExecutionType) *MockTask_GetExecutionType_Call {
	_c.Call.Return(run)
	return _c
}

// GetFilter provides a mock function with given fields:
func (_m *MockTask) GetFilter() *task_filter.TaskFilter {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFilter")
	}

	var r0 *task_filter.TaskFilter
	if rf, ok := ret.Get(0).(func() *task_filter.TaskFilter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*task_filter.TaskFilter)
		}
	}

	return r0
}

// MockTask_GetFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFilter'
type MockTask_GetFilter_Call struct {
	*mock.Call
}

// GetFilter is a helper method to define mock.On call
func (_e *MockTask_Expecter) GetFilter() *MockTask_GetFilter_Call {
	return &MockTask_GetFilter_Call{Call: _e.mock.On("GetFilter")}
}

func (_c *MockTask_GetFilter_Call) Run(run func()) *MockTask_GetFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTask_GetFilter_Call) Return(_a0 *task_filter.TaskFilter) *MockTask_GetFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTask_GetFilter_Call) RunAndReturn(run func() *task_filter.TaskFilter) *MockTask_GetFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with given fields:
func (_m *MockTask) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockTask_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type MockTask_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *MockTask_Expecter) GetName() *MockTask_GetName_Call {
	return &MockTask_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *MockTask_GetName_Call) Run(run func()) *MockTask_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTask_GetName_Call) Return(_a0 string) *MockTask_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTask_GetName_Call) RunAndReturn(run func() string) *MockTask_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GetStoreKey provides a mock function with given fields:
func (_m *MockTask) GetStoreKey() *string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStoreKey")
	}

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// MockTask_GetStoreKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStoreKey'
type MockTask_GetStoreKey_Call struct {
	*mock.Call
}

// GetStoreKey is a helper method to define mock.On call
func (_e *MockTask_Expecter) GetStoreKey() *MockTask_GetStoreKey_Call {
	return &MockTask_GetStoreKey_Call{Call: _e.mock.On("GetStoreKey")}
}

func (_c *MockTask_GetStoreKey_Call) Run(run func()) *MockTask_GetStoreKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTask_GetStoreKey_Call) Return(_a0 *string) *MockTask_GetStoreKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTask_GetStoreKey_Call) RunAndReturn(run func() *string) *MockTask_GetStoreKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTask creates a new instance of MockTask. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTask(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTask {
	mock := &MockTask{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
